import pandas as pd
import datetime as dt
crimp = pd.read_csv("Report of Crimp1.csv").dropna(how = "all")
crimp.dropna(axis = 1)
diamresult = crimp["Index;JobID;Name;Diam;Pres;Dies;Corr;Retr;Del;CounterValue;Steps;Step;DiamResult;DiaMin;DiaMax;PresResult;PresMin;PresMax;OverLimit;Day;Month;Year;Hour;Minute;Second;OperatorID;DiaCurvePoints1..100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PresCurvePoints1..100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;END"].str.split(";", expand = True)
diamresult.head(25)
raw_data = diamresult.drop([27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], axis = "columns")
crimp_colm = raw_data.rename(mapper = {0 : "Index", 1 : "JobID", 2 : "Name", 3 : "Diam", 4 : "Pres", 5 : "Dies", 6 : "Corr", 7 : "Retr", 8 : "Del", 9 : "CounterValue", 10 : "Steps", 11 : "Step", 12 : "DiamResult", 13 : "DiaMin", 14 : "DiaMax", 15 : "PresResult", 16 : "PresMin" , 17 : "PresMax", 18 : "OverLimit", 19 : "Day", 20 : "Month", 21 : "Year", 22 : "Hour", 23 : "Minute", 24 : "Second", 25 : "OperatorID", 26 : "DiaCurvePoints1..100" }, axis = "columns")
crimp_analysis = crimp_colm.drop(["JobID", "Name", "Corr", "Retr", "Del", "CounterValue", "Steps", "Step",  "OverLimit", "OperatorID", "DiaCurvePoints1..100"], axis = "columns")
crimp_analysis["Dies"].astype("category")
crimp_analysis.head()
crimp_analysis["DateTime"] = pd.to_datetime(crimp_analysis[["Day","Month","Year","Hour","Minute","Second"]])
crimp_report = crimp_analysis.drop(["Day","Month","Year","Hour","Minute","Second"], axis = "columns")
crimp_report.head()
crimp_report.to_csv("Final_Crimp_Report", index = False)
excel_file = pd.ExcelWriter("Final_Crimp_Report_v1.xlsx")
crimp_report.to_excel(excel_file , index = False , encoding = "utf-8")
excel_file.save()
crimp_visual = pd.read_csv("Final_Crimp_Report", parse_dates = ["DateTime"] )
crimp_visual["CycleTime"] = crimp_visual["DateTime"].diff()
crimp_visual["TotalSeconds"] = crimp_visual["CycleTime"].dt.total_seconds()
crimp_visual = crimp_visual.dropna(how = "any", axis = 0)
crimp_visual["TotalSeconds"] = crimp_visual["TotalSeconds"].astype(int)
def cycletimestats(TotalSeconds):
        if TotalSeconds < 45:
            return "Incredible"
        elif TotalSeconds < 90:
            return "Need improvement"
        else:
            return "Not Acceptable"
crimp_visual[["PresResult","DiamResult"]][-300:-1].plot()
plt.grid()
plt.xlabel("No. of parts", color = "Red", fontsize = 16)
plt.ylabel("Pressure and Diameter", color = "Red", fontsize = 16)
plt.figure(figsize = (10,2),dpi = 200)
plt.show()

fig = plt.figure(figsize = (15,2),dpi = 200)
ax1 = fig.add_subplot(121)
ax1.plot(crimp_visual["PresResult"][-300:-1])
ax2 = ax1.twinx()
ax2.plot(crimp_visual["DiamResult"][-300:-1], color = "red")
ax2.grid(None)

plt.figure(figsize = (10,2),dpi = 100)
x = crimp_visual["DateTime"][-30:-1]
y = crimp_visual["DiamResult"][-30:-1]
plt.xlabel("Time", color = "red", size = 18)
plt.ylabel("Diameter",  color = "red", size = 18)
plt.title("Diameter vs Time Graph", color = "blue", fontdict={"fontname":"Comic Sans MS", 'fontsize':15})
plt.plot(x,y)
plt.xticks(crimp_visual["DateTime"][-30:-1], rotation = "vertical", size = 8)
plt.yticks([18,18.5,19.0,19.2])
plt.grid(which="major")
plt.show()
